import json
import os.path
import sys
from io import StringIO
from datetime import datetime, timezone

import scrapy
from scrapy import FormRequest
from scrapy.shell import inspect_response
from scrapy.spidermiddlewares.httperror import HttpError
from scrapy_playwright.page import PageMethod


class CuckooSpider(scrapy.Spider):
    name = "cuckoo"
    allowed_domains = ["cuckoo.cert.ee"]
    url = 'https://cuckoo.cert.ee/analysis/{}/export/'
    start_id = ""

    def start_requests(self):
        path = './max_id.txt'
        if not os.path.isfile(path):
            sys.exit("Fatal error: 'max_id.txt' file not found. Please run cuckoo_start, or create this file manually "
                     "first.")

        with open('./max_id.txt', 'r') as max_id_file:
            max_id = max_id_file.read()
            if max_id.isdigit():
                self.start_id = max_id
            else:
                sys.exit("Fatal error: max_id.txt did not contain a valid ID.")

        for i in range(0,int(self.amount_to_fetch)):
            if self.start_id.isdigit():
                yield scrapy.Request(self.url.format(int(self.start_id)-i), errback=self.get_errback) #3967929-i
            else:
                sys.exit("Fatal error: start_id is empty or not a number.")

    def parse(self, response):
        self.state['items_count'] = self.state.get('items_count', 0) + 1
        self.state['start_id'] = self.start_id
        self.state['latest_url_crawled'] = response.request.url
        self.state['last_updated'] = datetime.now(timezone.utc)
        token = response.css("form input[name=csrfmiddlewaretoken]::attr(value)").extract_first()
        #print(token)

        # headers = {
        #
        # }

        # "Content-Type": "multipart/form-data",
        # "Content-Length": 280,
        # "Accept-Encoding": "gzip, deflate, br",
        # 			"Cache-Control": "no-cache",
        # 			"Connection": "keep-alive",
        # "Host": "cuckoo.cert.ee",
        # "Referer": "https://cuckoo.cert.ee/analysis/3967929/export/"

        formdata = {
            "csrfmiddlewaretoken": token,
            "dirs": "reports"
        }

        request = FormRequest(url=response.request.url,
                              formdata=formdata,
							  method='POST',
                              callback=self.parse_file)

        # request = FormRequest.from_response(response,
        #								formdata=formdata,
        #								#headers=headers,
        #								dont_click=True,
        #								#body=json.dumps(formdata),
        #								callback=self.parse_file)

        yield request

    def parse_file(self, response):
        id = response.request.url.split("/")[4]
        with open('./reports/zip/{}.zip'.format(id), "wb") as zip_file:
            zip_file.write(response.body)

    def get_errback(self, failure):
        self.logger.error(repr(failure))
        if failure.check(HttpError):
            response = failure.value.response
            if response.status == 404:
                self.logger.error('404 not found on %s', response.url)
                self.state['not_found_errors'] = self.state.get('not_found_errors', 0) + 1
