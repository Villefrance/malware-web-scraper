import ntpath
import os

import scrapy
from datetime import datetime, timezone
from malware.items import CapeItem


class CapeLocalSpider(scrapy.Spider):
    name = "cape_local"
    url = 'https://capesandbox.com/analysis/{}/'

    custom_settings = {
        "DOWNLOAD_DELAY": 0,
        "CONCURRENT_REQUESTS_PER_DOMAIN": 999,
        "COOKIES_ENABLED": False,
        "AUTOTHROTTLE_ENABLED": False
    }

    def start_requests(self):
        os.chdir(self.input_dir)
        for item in os.listdir(
                self.input_dir):  # input dir: ~/malware-web-scraper/malware/reports/cape/html/
            if item.endswith(".html"):
                filepath = "file://{}".format(os.path.abspath(item))
                #print(filepath)
                yield scrapy.Request(filepath, errback=self.errback)

    def parse(self, response):
        #self.state['items_count'] = self.state.get('items_count', 0) + 1
        #self.state['last_updated'] = datetime.now(timezone.utc)

        sha256 = "".join(response.xpath('//div[@class="panel panel-default"]/table/tr').getall()).split(
            '<th>SHA256</th>\n            <td style="word-wrap: break-word;">')[1].split("\n")[0]

        filepath = str(response.request.url).split("///")[1]

        id = ntpath.basename(
            filepath).split(".")[0]  # Using ntpath instead of os to handle Windows style paths on Unix systems as well

        analysis_url = self.url.format(id)

        #print(analysis_url)

        signatures = []
        for signature in response.css('#stadistics div div:nth-child(2) ul li::text').getall():
            clean_string = signature.strip().replace('\n', '')
            if not clean_string:
                continue
            signatures.append(clean_string)

        item = CapeItem()
        item['sha256'] = sha256
        item['url'] = analysis_url
        item['completed_at'] = response.css('#information div table tbody tr td:nth-child(4)::text').get()
        item['signatures'] = signatures

        yield item

    def errback(self, failure):
        self.logger.error(repr(failure))
        #self.state['errors'] = self.state.get('errors', 0) + 1
