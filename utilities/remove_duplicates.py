import json
import sys
import time

from datetime import datetime
import progressbar

potential_duplicates = {}
duplicates = {}

with open(sys.argv[1], "r") as file:
    data = json.load(file)
    j = 0
    print("Checking for duplicate samples...")
    unique = {each['sha256']: each for each in data}
    print("Unique samples: {}".format(len(unique)))
    with progressbar.ProgressBar(max_value=len(data), redirect_stdout=True) as bar:
        for sample in data:
            j += 1
            bar.update(j)
            if sample["sha256"] in potential_duplicates:
                potential_duplicates[sample["sha256"]].append((sample["analysis_url"], sample["completed_at"]))
            else:
                potential_duplicates[sample["sha256"]] = [(sample["analysis_url"], sample["completed_at"])]

    print("Finding potential duplicates...")
    with progressbar.ProgressBar(max_value=len(potential_duplicates), redirect_stdout=True) as bar:
        i = 1
        for potential_duplicate in potential_duplicates:
            bar.update(i)
            if len(potential_duplicates[potential_duplicate]) > 1:
                duplicates[potential_duplicate] = potential_duplicates[potential_duplicate]
            i += 1

    print("{} duplicate hashes found in data".format(len(duplicates)))

    newest_reports = {}
    print("Finding newest reports of duplicates...")
    with progressbar.ProgressBar(max_value=len(duplicates), redirect_stdout=True) as bar:
        i = 1
        for hash in duplicates:
            newest_report = ()
            #print(hash)
            for tuple in duplicates[hash]:
                current_datetime = datetime.strptime(tuple[1], '%Y-%m-%d %H:%M:%S')
                if not newest_report or current_datetime > datetime.strptime(newest_report[1], '%Y-%m-%d %H:%M:%S'):
                    #print("found newer datetime... newest_report: {} - current_datetime: {}".format(newest_report,
                    #                                                                                current_datetime))
                    newest_report = tuple
                #else:
                    #print("datetime was not newer... newest_report: {} - current_datetime: {}".format(newest_report,
                    #                                                                                  current_datetime))
            newest_reports[hash] = newest_report
            bar.update(i)
            i += 1
            #if newest_report[0] in data["analysis_url"]:
            #    print("found analysis_url based on newest_report for sha256: {}".format(sample["sha256"]))

    print("hashes with duplicate reports: {}".format(len(newest_reports)))
    already_checked_duplicates = []
    print("Writing output file...")
    with progressbar.ProgressBar(max_value=len(data), redirect_stdout=True) as bar:
        i = 1
        for sample in data:
            bar.update(i)
            data_set = {}
            if sample["sha256"] in newest_reports:
                if sample["sha256"] not in already_checked_duplicates:
                    if newest_reports[sample["sha256"]][0] == sample["analysis_url"]:
                        already_checked_duplicates.append(sample["sha256"])
                        #print(sample["sha256"])
                        data_set = sample
            else:
                data_set = sample

            with open(sys.argv[2], "a") as output_file:
                if i == 1:
                    output_file.write("[\n")
                if data_set:
                    json.dump(data_set, output_file)
                    if i < len(data):
                        output_file.write(",\n")
                if i == len(data):
                    output_file.write("\n]")
                i += 1
