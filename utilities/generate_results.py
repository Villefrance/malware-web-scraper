import csv
import json
import sys
import progressbar

with open(sys.argv[1], "r") as matching_hashes_file:
    cuckoo_signatures_amount = {}
    cape_signatures_amount = {}

    cuckoo_signature_count = {}
    cape_signature_count = {}
    cape_signature_count_not_all = {}
    cape_signature_count_all = {}

    cuckoo_signatures_to_ignore = []
    cape_signatures_to_ignore = []
    #cuckoo_signatures_to_ignore = ["antivirus_irma", "antivirus_virustotal", "file_yara"]
    #cape_signatures_to_ignore = ["procmem_yara", "antivirus_virustotal", "file_yara"]


    cape_signatures_to_find = ["antisandbox_cuckoo"]
    cape_signatures_found = {}

    matching_hashes = json.load(matching_hashes_file)
    i = 0
    with progressbar.ProgressBar(max_value=len(matching_hashes), redirect_stdout=True) as bar:
        for matching_hash in matching_hashes:
            i += 1
            bar.update(i)
            cuckoo_signatures_amount[matching_hash["sha256"]] = len(matching_hash["cuckoo_signatures"])
            cape_signatures_amount[matching_hash["sha256"]] = len(matching_hash["cape_signatures"])
            #print("matching_hash: {}".format(matching_hash))

            for cuckoo_signature in matching_hash["cuckoo_signatures"]:
                if cuckoo_signature not in cuckoo_signatures_to_ignore:
                    if cuckoo_signature in cuckoo_signature_count:
                        cuckoo_signature_count[cuckoo_signature] += 1
                    else:
                        cuckoo_signature_count[cuckoo_signature] = 1
                    #if cuckoo_signature == "antivirus_virustotal":
                    #    cuckoo_virustotal_signature_amount.append(matching_hash["sha256"])

            for cape_signature in matching_hash["cape_signatures"]:
                if cape_signature in cape_signature_count:
                    cape_signature_count[cape_signature] += 1
                else:
                    cape_signature_count[cape_signature] = 1

        for cape_signature in cape_signature_count:
            if cape_signature_count[cape_signature] != len(matching_hashes):
                cape_signature_count_not_all[cape_signature] = cape_signature_count[cape_signature]
            else:
                cape_signature_count_all[cape_signature] = cape_signature_count[cape_signature]

                #if cape_signature == "antivirus_virustotal":
                #    cape_virustotal_signature_amount.append(matching_hash["sha256"])

        with open(sys.argv[2], 'w', newline='') as file:
            writer = csv.writer(file)
            field = ["signature", "cuckoo_count", "cape_count"]
            writer.writerow(field)

            already_seen_signatures = []
            for signature in cuckoo_signature_count:
                if signature in cape_signature_count:
                    writer.writerow([signature, cuckoo_signature_count[signature], cape_signature_count[signature]])
                else:
                    writer.writerow([signature, cuckoo_signature_count[signature], 0])
                already_seen_signatures.append(signature)

            for signature in cape_signature_count:
                if signature not in already_seen_signatures:
                    writer.writerow([signature, 0, cape_signature_count[signature]])

        with open(sys.argv[3], 'w', newline='') as file:
            writer = csv.writer(file)
            field = ["signature", "cuckoo_count", "cape_count"]
            writer.writerow(field)

            cuckoo_signatures = []

            for signature in cuckoo_signature_count:
                cuckoo_signatures.append(signature)

            for signature in cape_signature_count:
                if signature in cuckoo_signatures:
                    writer.writerow([signature, cuckoo_signature_count[signature], cape_signature_count[signature]])

        average_cuckoo_signatures = sum(cuckoo_signatures_amount.values()) / len(cuckoo_signatures_amount)
        average_cape_signatures = sum(cape_signatures_amount.values()) / len(cape_signatures_amount)
        #print("len(cape_signatures_amount): {}".format(cape_signatures_amount))

        sorted_cuckoo_signature_count = sorted(cuckoo_signature_count.items(), key=lambda x: x[1], reverse=True)
        sorted_cape_signature_count = sorted(cape_signature_count.items(), key=lambda x: x[1], reverse=True)
        #sorted_cape_signature_count_not_all = sorted(cape_signature_count_not_all.items(), key=lambda x: x[1], reverse=True)#[:10]
        #sorted_cape_signature_count_all = sorted(cape_signature_count_all.items(), key=lambda x: x[1], reverse=True)

        print("Cuckoo top signatures: {}".format(sorted_cuckoo_signature_count))
        print("Cape top signatures: {}".format(sorted_cape_signature_count))
        #print("Cape count of signatures (not all): {}".format(sorted_cape_signature_count_not_all))
        #print("Cape count of signatures (all): {}".format(sorted_cape_signature_count_all))

        print("Cuckoo amount of unique signatures: {}".format(len(sorted_cuckoo_signature_count)))
        print("Cape amount of unique signatures: {}".format(len(sorted_cape_signature_count)))
        #print("Cape amount of unique signatures (not all): {}".format(len(sorted_cape_signature_count_not_all)))
        #print("Cape amount of unique signatures (all): {}".format(len(sorted_cape_signature_count_all)))

        #print("Cuckoo signatures amounts: {}".format(cuckoo_signatures_amount.values()))
        #print("Cape signatures amounts: {}".format(cape_signatures_amount.values()))

        print("Average Cuckoo signatures: {}".format(average_cuckoo_signatures))
        print("Average Cape signatures: {}".format(average_cape_signatures))
        print("Average Cape signatures (not all): {}".format(average_cape_signatures))